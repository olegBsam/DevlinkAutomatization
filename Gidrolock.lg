(**
* Управление краном Gidrolock
* @пл13 - выход датчика, показывает, что кран открыт
* @пл14 - выход датчика, показывает, что кран закрыт
* если XOR(пл10, пл11), то состояние не определено
* Связь:
* @пл21 - рв7
* @пл12 - рв8 управление краном (1 - открыт (белый);0 - закрыт(зелено-желтый))
* @рв9 - состояние крана
**)

ПРОЦЕДУРА Gidrolock_InitOnReboot
	НАЧАЛО
		ПЕРЕМЕННЫЕ
			НАЧАЛО
				ЛОГ openCrane
				ЛОГ closeCrane
			КОНЕЦ
			
		ДЛЯ iMdbGidrolockCraneWireOpen[13, 16],
			iMdbGidrolockCraneWireClose[14, 17],
			iOpcGidrolockCraneCmd[8, 10],
			iMdbCraneId[12, 15]
		{
			openCrane = пл[iMdbGidrolockCraneWireOpen]
			closeCrane = пл[iMdbGidrolockCraneWireClose]
			рв[iOpcGidrolockCraneCmd] = CMD_GIDROLOCK_CRANE_AWAIT
		}
	КОНЕЦ

(*********************************************************************)

ПРОЦЕДУРА Gidrolock_OpcControl
	НАЧАЛО
		ПЕРЕМЕННЫЕ
			НАЧАЛО
				ЦЕЛ16 opcCraneControlCmd
			КОНЕЦ
		КОНСТАНТЫ
			НАЧАЛО
				ЛОГ IS_OPEN_CRANE = 1
			КОНЕЦ
	
		ДЛЯ iOpcGidrolockCraneCmd[8, 10],
			iOpcGidrolockCraneState[9, 11],
			iMdbCraneId[12, 15]
		{		
			opcCraneControlCmd = вц(рв[iOpcGidrolockCraneCmd])
			ЕСЛИ (opcCraneControlCmd = CMD_GIDROLOCK_CRANE_OPEN){
				ЕСЛИ (рв[iOpcGidrolockCraneState] = STATE_GIDROLOCK_CRANE_CLOSE){
					пл[iMdbCraneId] = IS_OPEN_CRANE
				}			
			}
			ИНАЧЕ_ЕСЛИ (opcCraneControlCmd = CMD_GIDROLOCK_CRANE_CLOSE){
				ЕСЛИ (рв[iOpcGidrolockCraneState] = STATE_GIDROLOCK_CRANE_OPEN){	
					пл[iMdbCraneId] = !IS_OPEN_CRANE
				}
			}
		}
		
	КОНЕЦ

(*********************************************************************)
	
ПРОЦЕДУРА Gidrolock_Monitoring
	НАЧАЛО
		ПЕРЕМЕННЫЕ
			НАЧАЛО
				ЛОГ isCraneSwitched
				ЛОГ openCrane
				ЛОГ closeCrane
				ЦЕЛ16 craneState
			КОНЕЦ
							
		ДЛЯ iMdbGidrolockCraneWireOpen[13, 16],
			iMdbGidrolockCraneWireClose[14, 17],
			iOpcGidrolockCraneState[9, 11],
			iOpcGidrolockCraneCmd[8, 10],
			iMdbCraneId[12, 15],
			iTmrTsCraneChangeState[5, 7],
			iTmrTsCraneDelayChangeState[6, 8]
		{		
			openCrane = пл[iMdbGidrolockCraneWireOpen]
			closeCrane = пл[iMdbGidrolockCraneWireClose]
			craneState = Decoder_GetGidrolockCraneState(openCrane, closeCrane, пл[iMdbCraneId])
		
			:* true, если крану дана какая-то команда
			ЕСЛИ (рв[iOpcGidrolockCraneCmd] # CMD_GIDROLOCK_CRANE_AWAIT) {
				:* true, если кран находится в состоянии, перейти в которое ему указывает команда
				isCraneSwitched = (рв[iOpcGidrolockCraneCmd] = CMD_GIDROLOCK_CRANE_CLOSE) & (craneState = STATE_GIDROLOCK_CRANE_CLOSE)
				isCraneSwitched = isCraneSwitched | (рв[iOpcGidrolockCraneCmd] = CMD_GIDROLOCK_CRANE_OPEN) & (craneState = STATE_GIDROLOCK_CRANE_OPEN)
				ЕСЛИ (isCraneSwitched){
					выкл тс[iTmrTsCraneChangeState]
					тс[iTmrTsCraneChangeState] = 0
					
					тс[iTmrTsCraneDelayChangeState] = 0
					выкл тс[iTmrTsCraneDelayChangeState]
					
					:* Переводим кран в режим ожидания
					рв[iOpcGidrolockCraneCmd] = CMD_GIDROLOCK_CRANE_AWAIT
				}
				ИНАЧЕ {
					:* true, если команда указывает перейти из состояния открыт(закрыт) в закрыт(открыт) и состояние еще не достигнуто
					ЕСЛИ ((craneState = STATE_GIDROLOCK_CRANE_OPEN | craneState = STATE_GIDROLOCK_CRANE_CLOSE) & тс[iTmrTsCraneDelayChangeState] = 0){
						:* Запускаем таймер, отсчитывающий время задержки между получением команды и началом её выполнения
						тс[iTmrTsCraneDelayChangeState] = 0
						вкл тс[iTmrTsCraneDelayChangeState]
						:* Запускаем таймер, отсчитывающий время переключения между конечными состояниями
						тс[iTmrTsCraneChangeState] = 0
						вкл тс[iTmrTsCraneChangeState]
					}
					ИНАЧЕ_ЕСЛИ (craneState = STATE_GIDROLOCK_CRANE_OPENS | craneState = STATE_GIDROLOCK_CRANE_CLOSES){
						тс[iTmrTsCraneDelayChangeState] = 0
						выкл тс[iTmrTsCraneDelayChangeState]
					}
				}
			}
			рв[iOpcGidrolockCraneState] = цв(Decoder_GetGidrolockCraneFullState(craneState, вц(тс[iTmrTsCraneChangeState]), вц(тс[iTmrTsCraneDelayChangeState])))
		}
	КОНЕЦ

(*********************************************************************)

ФУНКЦИЯ Gidrolock_CmdClose
	ВХОДНЫЕ_ПЕРЕМЕННЫЕ
		НАЧАЛО
			ЦЕЛ16 gidrolockCraneId
		КОНЕЦ
	НАЧАЛО
		ДЛЯ iGidrolockCraneId[1, 2],
			iOpcGidrolockCraneCmd[8, 10],
			iOpcGidrolockCraneState[9, 11],
			iMdbCraneId[12, 15]
		{
			ЕСЛИ (iGidrolockCraneId = gidrolockCraneId)	{
				ЕСЛИ (рв[iOpcGidrolockCraneState] = STATE_GIDROLOCK_CRANE_OPEN | рв[iOpcGidrolockCraneState] = STATE_GIDROLOCK_CRANE_OPENS){
					:пл[iMdbCraneId]	= CMD_GIDROLOCK_CRANE_CLOSE
					рв[iOpcGidrolockCraneCmd] = CMD_GIDROLOCK_CRANE_CLOSE
				}
				ПРЕРВАТЬ
			}
		}
	КОНЕЦ

(*********************************************************************)

ФУНКЦИЯ Gidrolock_CmdOpen
	ВХОДНЫЕ_ПЕРЕМЕННЫЕ
		НАЧАЛО
			ЦЕЛ16 gidrolockCraneId
		КОНЕЦ
	НАЧАЛО
		ДЛЯ iGidrolockCraneId[1, 2],
			iMdbCraneId[12, 15],
			iOpcGidrolockCraneCmd[8, 10],
			iOpcGidrolockCraneState[9, 11]
		{
			ЕСЛИ (iGidrolockCraneId = gidrolockCraneId){
				ЕСЛИ (рв[iOpcGidrolockCraneState] = STATE_GIDROLOCK_CRANE_CLOSE | рв[iOpcGidrolockCraneState] = STATE_GIDROLOCK_CRANE_CLOSES){ 
					:пл[iMdbCraneId]	= CMD_GIDROLOCK_CRANE_OPEN
					рв[iOpcGidrolockCraneCmd] = CMD_GIDROLOCK_CRANE_OPEN
				}
				ПРЕРВАТЬ
			}
		}
	КОНЕЦ

(*********************************************************************)

ФУНКЦИЯ Gidrolock_GetStateById
	ВХОДНЫЕ_ПЕРЕМЕННЫЕ
		НАЧАЛО
			ЦЕЛ16 gidrolockCraneId
		КОНЕЦ
	ВЫХОДНЫЕ_ПЕРЕМЕННЫЕ
		НАЧАЛО
			ЦЕЛ16 gidrolockCraneState
		КОНЕЦ
	
	НАЧАЛО
		ДЛЯ iGidrolockCraneId[1, 2],
			iOpcGidrolockCraneState[9, 11]
		{
			ЕСЛИ (iGidrolockCraneId = gidrolockCraneId){
				gidrolockCraneState = вц(рв[iOpcGidrolockCraneState])
				ПРЕРВАТЬ
			}
		}
	КОНЕЦ

(*********************************************************************)

ФУНКЦИЯ Gidrolock_IsClosed
	ВХОДНЫЕ_ПЕРЕМЕННЫЕ
		НАЧАЛО
			ЦЕЛ16 gidrolockCraneId
		КОНЕЦ
	ВЫХОДНЫЕ_ПЕРЕМЕННЫЕ
		НАЧАЛО
			ЛОГ isClosedCrane
		КОНЕЦ
	
	НАЧАЛО
		ПЕРЕМЕННЫЕ
			НАЧАЛО
				ВЕЩ32 craneState
			КОНЕЦ
		ДЛЯ iGidrolockCraneId[1, 2],
			iOpcGidrolockCraneState[9, 11]
		{
			ЕСЛИ (iGidrolockCraneId = gidrolockCraneId){
				craneState = рв[iOpcGidrolockCraneState]
				isClosedCrane = (craneState = STATE_GIDROLOCK_CRANE_CLOSE)
				ПРЕРВАТЬ
			}
		}
	КОНЕЦ

(*********************************************************************)

ФУНКЦИЯ Gidrolock_IsOpened 
	ВХОДНЫЕ_ПЕРЕМЕННЫЕ
		НАЧАЛО
			ЦЕЛ16 gidrolockCraneId
		КОНЕЦ
	ВЫХОДНЫЕ_ПЕРЕМЕННЫЕ
		НАЧАЛО
			ЛОГ isOpenedCrane
		КОНЕЦ
	
	НАЧАЛО
		ПЕРЕМЕННЫЕ
			НАЧАЛО
				ВЕЩ32 craneState 
			КОНЕЦ
		ДЛЯ iGidrolockCraneId[1, 2],
			iOpcGidrolockCraneState[9, 11]
		{
			ЕСЛИ (iGidrolockCraneId = gidrolockCraneId){
				craneState = рв[iOpcGidrolockCraneState]
				isOpenedCrane = (craneState = STATE_GIDROLOCK_CRANE_OPEN)
				ПРЕРВАТЬ
			}
		}
	КОНЕЦ


(*********************************************************************)

ФУНКЦИЯ Gidrolock_CmdChangeState
	ВХОДНЫЕ_ПЕРЕМЕННЫЕ
		НАЧАЛО
			ЦЕЛ16 gidrolockCraneId
		КОНЕЦ
		
	НАЧАЛО
		ДЛЯ iGidrolockCraneId[1, 2],
			iOpcGidrolockCraneState[9, 11],
			iOpcGidrolockCraneCmd[8, 10],
			iMdbCraneId[12, 15]
		{
			ЕСЛИ (iGidrolockCraneId = gidrolockCraneId){
				ЕСЛИ (рв[iOpcGidrolockCraneState] = STATE_GIDROLOCK_CRANE_OPEN | рв[iOpcGidrolockCraneState] = STATE_GIDROLOCK_CRANE_OPENS){
					рв[iOpcGidrolockCraneCmd] = CMD_GIDROLOCK_CRANE_CLOSE
				}
				ИНАЧЕ_ЕСЛИ (рв[iOpcGidrolockCraneState] = STATE_GIDROLOCK_CRANE_CLOSE | рв[iOpcGidrolockCraneState] = STATE_GIDROLOCK_CRANE_CLOSES){ 
					рв[iOpcGidrolockCraneCmd] = CMD_GIDROLOCK_CRANE_OPEN
				}
				ПРЕРВАТЬ
			}
		}
	КОНЕЦ
	

(****************************************************************)

ФУНКЦИЯ Gidrolock_CheckNotFinishedCleringCrane
	ВЫХОДНЫЕ_ПЕРЕМЕННЫЕ
		НАЧАЛО
			ЛОГ isClearingFinished
			ЦЕЛ16 maintenanceStep
		КОНЕЦ
	НАЧАЛО
	КОНСТАНТЫ
		НАЧАЛО
			ЦЕЛ16 MAINTENANCE_FIRST_STEP = 1
			ЦЕЛ16 MAINTENANCE_TWO_STEP = 2
			ЦЕЛ16 MAINTENANCE_IS_ABORTED = 3
		КОНЕЦ
		isClearingFinished = FALSE
		ДЛЯ	iOpcClearingSt[28, 29],
			iOpcGidrolockCraneState[9, 11],
			iGidrolockCraneId[1, 2]	
		{
			ЕСЛИ (рв[iOpcGidrolockCraneState] # STATE_GIDROLOCK_CRANE_ERROR){
				ЕСЛИ (рв[iOpcClearingSt] # CRANE_MAINTENANCE_IS_FINISHED){
					ЕСЛИ (рв[iOpcClearingSt] = CRANE_MAINTENANCE_IS_NOT_RUN){
						maintenanceStep = MAINTENANCE_FIRST_STEP
						:рв24 = рв[iOpcGidrolockCraneState]
						:Gidrolock_CmdChangeState(iGidrolockCraneId)
						:рв[iOpcClearingSt] = CRANE_MAINTENANCE_IS_RUN
					}
					ИНАЧЕ_ЕСЛИ (рв[iOpcClearingSt] = CRANE_MAINTENANCE_IS_RUN){
						maintenanceStep = MAINTENANCE_IS_ABORTED
						ЕСЛИ (рв24 # рв[iOpcGidrolockCraneState]) {
							maintenanceStep = MAINTENANCE_TWO_STEP
							:Gidrolock_CmdChangeState(iGidrolockCraneId)
						}
						:рв[iOpcClearingSt] = CRANE_MAINTENANCE_IS_FINISHED
					}
					ВЫХОД
				}
			}
		}
		isClearingFinished = TRUE
	КОНЕЦ

(*********************************************************************)

ФУНКЦИЯ Gidrolock_IsAllCraneInStopeState

	ВЫХОДНЫЕ_ПЕРЕМЕННЫЕ
		НАЧАЛО
			ЛОГ isAllCraneInStopeState
		КОНЕЦ
	
	НАЧАЛО
		ПЕРЕМЕННЫЕ
			НАЧАЛО
				ЛОГ isFinishedCraneState
			КОНЕЦ
		isAllCraneInStopeState = TRUE
		
		ДЛЯ	iOpcClearingSt[28, 29],
			iOpcGidrolockCraneState[9, 11],
			iMdbCraneId[12, 15]
		{
			ЕСЛИ (рв[iOpcGidrolockCraneState] # STATE_GIDROLOCK_CRANE_ERROR){
				ЕСЛИ (((рв[iOpcGidrolockCraneState] = STATE_GIDROLOCK_CRANE_CLOSE) & (пл[iMdbCraneId] = CMD_GIDROLOCK_CRANE_CLOSE))) {
					
				}
				ИНАЧЕ_ЕСЛИ (((рв[iOpcGidrolockCraneState] = STATE_GIDROLOCK_CRANE_OPEN) & (пл[iMdbCraneId] = CMD_GIDROLOCK_CRANE_OPEN))) {
					
				}
				ИНАЧЕ{
					isAllCraneInStopeState = FALSE
					ВЫХОД
				}
			}
		}
	КОНЕЦ
	
(*********************************************************************)


